231. Power of Two

Given an integer n, return true if it is a power of two. Otherwise, return false.

An integer n is a power of two, if there exists an integer x such that n == 2x.

 

Example 1:

Input: n = 1
Output: true
Explanation: 20 = 1
Example 2:

Input: n = 16
Output: true
Explanation: 24 = 16
Example 3:

Input: n = 3
Output: false
Example 4:

Input: n = 4
Output: true
Example 5:

Input: n = 5
Output: false
 

Constraints:

-231 <= n <= 231 - 1



Answer


//using bitwise operator

public boolean isPowerOfTwo(int n) {

	//1st approach
	if(n<=0) return false;
    if( (n&(n-1)) == 0) return true;
    else         return false;
	
	//2nd approach
    if(n<0) return false;
    
    int count=0;
    while(n!=0){
        n=n&(n-1);
        count++;
    }
    if(count==1) return true;
    else         return false;
}


or


class Solution {
    public boolean isPowerOfFour(int n) {
        return (Math.log10(n) / Math.log10(2)) % 1 == 0;  
		// Formula to check number is generalise as power of 2.
    }
}

or


class Solution {
public boolean isPowerOfTwo(int n) {

   if(n==1){
       return true;
   }
    if(n==0){
        return false;
    }
    if(n%2 == 0) return isPowerOfTwo(n/2);
    else return false;
   
}
}
