1290. Convert Binary Number in a Linked List to Integer


Given head which is a reference node to a singly-linked list. The value of each node in the linked list is either 0 or 1. The linked list holds the binary representation of a number.

Return the decimal value of the number in the linked list.

 

Example 1:


Input: head = [1,0,1]
Output: 5
Explanation: (101) in base 2 = (5) in base 10
Example 2:

Input: head = [0]
Output: 0
Example 3:

Input: head = [1]
Output: 1
Example 4:

Input: head = [1,0,0,1,0,0,1,1,1,0,0,0,0,0,0]
Output: 18880
Example 5:

Input: head = [0,0]
Output: 0
 

Constraints:

The Linked List is not empty.
Number of nodes will not exceed 30.
Each node's value is either 0 or 1.





Answer


class Solution {
    public int getDecimalValue(ListNode head) {
        ListNode temp=head;
        
        
        //calculated the size of the list
        int c=0;
        while(temp != null){
            c++;
            temp=temp.next;
        }
        
        
        temp=head;
        int r=0;
        while(temp !=null){
            
            r+=(temp.val)*(Math.pow(2,c-1));
            c-=1;
            temp=temp.next;
        }
        return r;
    }
}




or 





public int getDecimalValue(ListNode head) {
        int res = 0;
        
		// Let's first understand how the decimal to binary conversion takes place.
		// Suppose, we have a decimal number 1101.
		// So, to convert that into decimal, we need to multiply the bit with
		// increasing power of 2 from right to left starting from 0.
		// So decimal value will be - (1 * 2^3) + (1 * 2^2) + (0 * 2^1) + (1 * 2^0).
		// Which will in turn be - (1 * 8) + (1 * 4) + (0 * 2) + (1 * 1).
		// Which will result in 13.
		
		// So similarly, this code will do that from left to right in a reverse fashion.
		// At the beginning of the program, res is initialized to 0.
		// So going from left to right, we will have to multiply res * 2 and add the bit.
		// So first iteration will be - res = (0 * 2) + 1 = 1.
		// Second iteration will be - res = (1 * 2) + 1 = 3.
		// Third iteration will be - res = (3 * 2) + 0 = 6.
		// Fourth (last) iteration will be - res = (6 * 2) + 1 = 13.
        while (head != null) {
            res = (res * 2) + head.val;
            head = head.next;
        }
        
        return res;
    }
    
    let there be the binary number - abcd, where a,b,c,d can be anything between 1 and 0.
so the decimal number will be = (a2^3) + (b2^2) + (c2^1) + (d2^0).
But we can also write it as :- ([{(0*2 +a)*2+b}*2+c]*2+d) . By looking to this carefully we can know that each element in the binary number is multiplied by the same number of the power of 2 as in the first expression.
And that's also a way to tell the same thing but in different way.
