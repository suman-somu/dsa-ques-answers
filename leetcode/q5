83. Remove Duplicates from Sorted List

Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

 

Example 1:


Input: head = [1,1,2]
Output: [1,2]
Example 2:


Input: head = [1,1,2,3,3]
Output: [1,2,3]
 

Constraints:

The number of nodes in the list is in the range [0, 300].
-100 <= Node.val <= 100
The list is guaranteed to be sorted in ascending order.


Answer

class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        
      if (head == null) // for empty list
            return null;
        ListNode curNode = head; // the current node we are checking at, start wit head
        while (curNode.next != null) { // when there is more node after current one
            if (curNode.val == curNode.next.val) // when duplicate
                curNode.next = curNode.next.next; //scape the duplicated node
            else 
               curNode = curNode.next; // move further
        }
        return head;
    }
}
